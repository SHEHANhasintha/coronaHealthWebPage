(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{114:function(e,r,t){t.r(r),function(e){t.d(r,"default",(function(){return P}));var a,o=t(0),n=t.n(o),p=t(260),i=t(255),s=t(252),c=t(256),l=t(249),d=t(251),u=t(184),m=t(220),f=t.n(m),b=t(244),h=t(250),g=t(218),y=t(24),v=t(22);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(e);var x="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e};function j(){return n.a.createElement(b.a,{variant:"body2",color:"textSecondary",align:"center"})}var O,E,w=Object(h.a)((function(e){return{paper:{paddingTop:e.spacing(18),display:"flex",flexDirection:"column",alignItems:"center"},avatar:{margin:e.spacing(1),backgroundColor:e.palette.secondary.main},form:{width:"100%",height:"100%",marginTop:e.spacing(1)},submit:{margin:e.spacing(3,0,2)}}}));function P(){var e=w();return n.a.createElement("div",null,n.a.createElement(y.a,null),n.a.createElement(g.a,{component:"main",maxWidth:"xs"},n.a.createElement(s.a,null),n.a.createElement("div",{className:e.paper},n.a.createElement(p.a,{className:e.avatar},n.a.createElement(f.a,null)),n.a.createElement(b.a,{component:"h1",variant:"h5"},"Reset Password"),n.a.createElement("form",{className:e.form,noValidate:!0},n.a.createElement(c.a,{variant:"outlined",margin:"normal",required:!0,fullWidth:!0,id:"email",label:"Email Address",name:"email",autoComplete:"email",autoFocus:!0}),n.a.createElement(i.a,{type:"submit",fullWidth:!0,variant:"contained",color:"primary",className:e.submit},"Send Email"),n.a.createElement(d.a,{container:!0},n.a.createElement(d.a,{item:!0},n.a.createElement(l.a,{href:"/signup",variant:"body2"},"Don't have an account? Sign Up"))))),n.a.createElement(u.a,{mt:8},n.a.createElement(j,null))),n.a.createElement(v.a,null))}x(P,"useStyles{classes}",(function(){return[w]})),(O="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(O.register(j,"Copyright","E:\\coronaHealthWebPage\\covidatlas\\src\\verify\\forgotPassword.js"),O.register(w,"useStyles","E:\\coronaHealthWebPage\\covidatlas\\src\\verify\\forgotPassword.js"),O.register(P,"SignIn","E:\\coronaHealthWebPage\\covidatlas\\src\\verify\\forgotPassword.js")),(E="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&E(e)}.call(this,t(10)(e))},184:function(e,r,t){var a=t(125),o=t(9),n=(t(21),t(123));var p=function(e){var r=function(r){var t=e(r);return r.css?Object(o.a)(Object(o.a)({},Object(n.a)(t,e(Object(o.a)({theme:r.theme},r.css)))),function(e,r){var t={};return Object.keys(e).forEach((function(a){-1===r.indexOf(a)&&(t[a]=e[a])})),t}(r.css,[e.filterProps])):t};return r.propTypes={},r.filterProps=["css"].concat(Object(a.a)(e.filterProps)),r};var i=function(){for(var e=arguments.length,r=new Array(e),t=0;t<e;t++)r[t]=arguments[t];var a=function(e){return r.reduce((function(r,t){var a=t(e);return a?Object(n.a)(r,a):r}),{})};return a.propTypes={},a.filterProps=r.reduce((function(e,r){return e.concat(r.filterProps)}),[]),a},s=t(122),c=t(133);function l(e,r){return r&&"string"==typeof r?r.split(".").reduce((function(e,r){return e&&e[r]?e[r]:null}),e):null}var d=function(e){var r=e.prop,t=e.cssProperty,a=void 0===t?e.prop:t,o=e.themeKey,n=e.transform,p=function(e){if(null==e[r])return null;var t=e[r],p=l(e.theme,o)||{};return Object(c.a)(e,t,(function(e){var r;return"function"==typeof p?r=p(e):Array.isArray(p)?r=p[e]||e:(r=l(p,e)||e,n&&(r=n(r))),!1===a?r:Object(s.a)({},a,r)}))};return p.propTypes={},p.filterProps=[r],p};function u(e){return"number"!=typeof e?e:"".concat(e,"px solid")}var m=i(d({prop:"border",themeKey:"borders",transform:u}),d({prop:"borderTop",themeKey:"borders",transform:u}),d({prop:"borderRight",themeKey:"borders",transform:u}),d({prop:"borderBottom",themeKey:"borders",transform:u}),d({prop:"borderLeft",themeKey:"borders",transform:u}),d({prop:"borderColor",themeKey:"palette"}),d({prop:"borderRadius",themeKey:"shape"})),f=i(d({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),d({prop:"display"}),d({prop:"overflow"}),d({prop:"textOverflow"}),d({prop:"visibility"}),d({prop:"whiteSpace"})),b=i(d({prop:"flexBasis"}),d({prop:"flexDirection"}),d({prop:"flexWrap"}),d({prop:"justifyContent"}),d({prop:"alignItems"}),d({prop:"alignContent"}),d({prop:"order"}),d({prop:"flex"}),d({prop:"flexGrow"}),d({prop:"flexShrink"}),d({prop:"alignSelf"}),d({prop:"justifyItems"}),d({prop:"justifySelf"})),h=i(d({prop:"gridGap"}),d({prop:"gridColumnGap"}),d({prop:"gridRowGap"}),d({prop:"gridColumn"}),d({prop:"gridRow"}),d({prop:"gridAutoFlow"}),d({prop:"gridAutoColumns"}),d({prop:"gridAutoRows"}),d({prop:"gridTemplateColumns"}),d({prop:"gridTemplateRows"}),d({prop:"gridTemplateAreas"}),d({prop:"gridArea"})),g=i(d({prop:"position"}),d({prop:"zIndex",themeKey:"zIndex"}),d({prop:"top"}),d({prop:"right"}),d({prop:"bottom"}),d({prop:"left"})),y=i(d({prop:"color",themeKey:"palette"}),d({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),v=d({prop:"boxShadow",themeKey:"shadows"});function x(e){return e<=1?"".concat(100*e,"%"):e}var j=d({prop:"width",transform:x}),O=d({prop:"maxWidth",transform:x}),E=d({prop:"minWidth",transform:x}),w=d({prop:"height",transform:x}),P=d({prop:"maxHeight",transform:x}),W=d({prop:"minHeight",transform:x}),k=(d({prop:"size",cssProperty:"width",transform:x}),d({prop:"size",cssProperty:"height",transform:x}),i(j,O,E,w,P,W,d({prop:"boxSizing"}))),S=t(262),K=i(d({prop:"fontFamily",themeKey:"typography"}),d({prop:"fontSize",themeKey:"typography"}),d({prop:"fontStyle",themeKey:"typography"}),d({prop:"fontWeight",themeKey:"typography"}),d({prop:"letterSpacing"}),d({prop:"lineHeight"}),d({prop:"textAlign"})),G=t(115),H=t(0),N=t.n(H),C=t(117),L=t(33),R=t.n(L),T=t(257);function A(e,r){var t={};return Object.keys(e).forEach((function(a){-1===r.indexOf(a)&&(t[a]=e[a])})),t}var z=t(128),M=function(e){var r=function(e){return function(r){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.name,n=Object(G.a)(t,["name"]);var p,i=a,s="function"==typeof r?function(e){return{root:function(t){return r(Object(o.a)({theme:e},t))}}}:{root:r},c=Object(T.a)(s,Object(o.a)({Component:e,name:a||e.displayName,classNamePrefix:i},n));r.filterProps&&(p=r.filterProps,delete r.filterProps),r.propTypes&&(r.propTypes,delete r.propTypes);var l=N.a.forwardRef((function(r,t){var a=r.children,n=r.className,i=r.clone,s=r.component,l=Object(G.a)(r,["children","className","clone","component"]),d=c(r),u=Object(C.a)(d.root,n),m=l;if(p&&(m=A(m,p)),i)return N.a.cloneElement(a,Object(o.a)({className:Object(C.a)(a.props.className,u)},m));if("function"==typeof a)return a(Object(o.a)({className:u},m));var f=s||e;return N.a.createElement(f,Object(o.a)({ref:t,className:u},m),a)}));return R()(l,e),l}}(e);return function(e,t){return r(e,Object(o.a)({defaultTheme:z.a},t))}},I=p(i(m,f,b,h,g,y,v,k,S.b,K)),B=M("div")(I,{name:"MuiBox"});r.a=B},218:function(e,r,t){var a=t(9),o=t(115),n=t(122),p=t(0),i=(t(21),t(117)),s=t(118),c=t(119),l=p.forwardRef((function(e,r){var t=e.classes,n=e.className,s=e.component,l=void 0===s?"div":s,d=e.disableGutters,u=void 0!==d&&d,m=e.fixed,f=void 0!==m&&m,b=e.maxWidth,h=void 0===b?"lg":b,g=Object(o.a)(e,["classes","className","component","disableGutters","fixed","maxWidth"]);return p.createElement(l,Object(a.a)({className:Object(i.a)(t.root,n,f&&t.fixed,u&&t.disableGutters,!1!==h&&t["maxWidth".concat(Object(c.a)(String(h)))]),ref:r},g))}));r.a=Object(s.a)((function(e){return{root:Object(n.a)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2),display:"block"},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(e.breakpoints.values).reduce((function(r,t){var a=e.breakpoints.values[t];return 0!==a&&(r[e.breakpoints.up(t)]={maxWidth:a}),r}),{}),maxWidthXs:Object(n.a)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:Object(n.a)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:Object(n.a)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:Object(n.a)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:Object(n.a)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(l)},220:function(e,r,t){var a=t(134);Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=a(t(0)),n=(0,a(t(156)).default)(o.default.createElement("path",{d:"M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"}),"VpnKey");r.default=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=7.bundle.js.map